name: CI/CD workflow for Angular Build and Sonar Code Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Descargar el código fuente
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configurar Node.js (requerido para Angular y SonarQube)
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # 3. Asignar permisos al ejecutable de Node.js y verificar enlace simbólico
      - name: Ensure Node.js permissions
        run: |
          sudo chmod +x $(which node)
          if [ ! -f "/usr/local/bin/node" ]; then
            sudo ln -s $(which node) /usr/local/bin/node
          fi

      # 4. Instalar dependencias de npm para Angular
      - name: Install npm dependencies
        run: npm install --legacy-peer-deps

      # 5. Instalar dependencias adicionales para Chrome Headless
      - name: Install Chrome dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgbm-dev libxshmfence1 libasound2

      # 6. Instalar Google Chrome
      - name: Install Google Chrome
        uses: browser-actions/setup-chrome@v1

      # 7. Ejecutar pruebas de Angular en modo headless con Karma y Chrome
      - name: Run Angular tests
        run: npm run test -- --watch=false --no-progress --browsers=ChromeHeadless
        env:
          CHROME_BIN: /usr/bin/google-chrome

      # 8. Instalar SonarScanner
      - name: Install SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.0.2966-linux.zip
          unzip sonar-scanner-cli-5.0.0.2966-linux.zip
          mv sonar-scanner-5.0.0.2966-linux sonar-scanner
          sudo chmod +x sonar-scanner/bin/sonar-scanner
          echo "$(pwd)/sonar-scanner/bin" >> $GITHUB_PATH

      # 9. Ejecutar el análisis de SonarQube excluyendo archivos CSS y configurando la ruta de Node.js
      - name: Run SonarQube Scan with CSS Exclusions
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner \
            -Dsonar.organization=my-org \
            -Dsonar.projectKey=my-angular-app \
            -Dsonar.sources=. \
            -Dsonar.exclusions=**/*.css,**/node_modules/** \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.nodejs.executable=$(which node)

      # 10. Verificar el estado de la Quality Gate
      - name: Quality Gate Status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          status=$(curl -s -u $SONAR_TOKEN: $SONAR_HOST_URL/api/qualitygates/project_status?projectKey=my-angular-app | jq -r '.projectStatus.status')
          if [ "$status" != "OK" ]; then
            echo "Quality Gate failed: $status"
            exit 1
          else
            echo "Quality Gate passed: $status"
          fi

